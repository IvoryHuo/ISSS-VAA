---
title: "In-class Exercise 4"
author: "Huo Da"
date: "04 Feb 2023"
date-modified: "`r Sys.Date()`"
execute: 
  echo: true
  eval: true
  warning: false
format: html
---

```{r}
pacman::p_load(plotly,DT,patchwork,ggstatsplot,tidyverse)
```

```{r}
exam_data = read_csv("data/Exam_data.csv")

```


```{r}
plot_ly(data = exam_data,
        x = ~ENGLISH,
        y=~MATHS,
        color = ~RACE)
```

```{r}
p <-ggplot(data = exam_data,
           aes(x = MATHS,
               y = ENGLISH)) +
  geom_point(dotsize = 1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
ggplotly(p)
```

```{r}
ggbetweenstats(
  data = exam_data,
  x =  GENDER,
  y = MATHS,
  tpye = "p",
  messages = FALSE
  
  
)

# student-t test: assume equal var.

```

```{r}
ggscatterstats(
  data = exam_data,
  x = MATHS,
  y = ENGLISH,
  marginal = TRUE
)
```

#Model
```{r}
# last three comes from easystats: https://easystats.github.io/easystats/
# readxl belongs to tidyverse but not in default install list
pacman::p_load(readxl,performance,pparameters,see,gtsummary)

```
```{r}
car_resale <-read_xls("data/ToyotaCorolla.xls",
                      "data")
car_resale
```

```{r}
model <- lm(Price ~Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period,
            data = car_resale)

model
```
The coefficients, predicted values etc can be save as data tables for future/easier comparisons and generate the reports. check gtsummary.

```{r}
tbl_regression(model)
```
Diagnostic Check
```{r}
check_collinearity(model)
```
With performace from easystsats, we can visual the diagnostic check.
```{r}
check_c <- check_collinearity((model))
plot(check_c)
                    
```

```{r}
check_model(model)
```
remove one the two highly correlated vars.
```{r}
model1 <- lm(Price ~Age_08_04 + KM + Weight + Guarantee_Period,
            data = car_resale)

tbl_regression(model1,intercept = TRUE)
```
```{r}
check_n <- check_normality(model1)
plot(check_n)
```

```{r}
plot(compare_performance(model,model1),rank = TRUE)
```

#Visusliase Uncertainty
### Use ggplot2

```{r}
my_sum = exam_data %>%
  group_by(RACE) %>%
  summarise(
    n = n(),
    mean = mean(MATHS),
    sd = sd(MATHS)
    
    
  )%>%
  mutate(se=sd/sqrt(n-1))
```

```{r}
ggplot(my_sum) +
  geom_errorbar(
    aes(x=RACE, 
        ymin=mean-se, 
        ymax=mean+se), 
    width=0.2, 
    colour="black", 
    alpha=0.9, 
    size=0.5) +
  geom_point(
    aes(x=RACE,y=mean),
    stat="identity", #readin the single record
    color = "red",
    dotsize = 1.5,
    alpha = 1
  )
```
### Use ggdist method
































