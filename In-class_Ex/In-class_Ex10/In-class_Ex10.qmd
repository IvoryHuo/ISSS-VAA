---
title: "In class 10 (Stock Price)"
author: "Huo Da"
---

# Overview

By the end of this hands-on exercise, you will be able to:

-   plot horizon graph by using ggHoriPlot package,

-   plot static and interactive stock prices line graph(s) by ggplot2 and plotly R packages,

-   plot static candlestick chart by using tidyquant package,

-   plot static bollinger bands by using [tidyquant](https://business-science.github.io/tidyquant/), and plot interactive candlestick chart by using ggplot2 and plotly R.

Load the necessary libraries first.
```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| warning: false
#| message: false
pacman::p_load(lubridate, tidyquant, ggHoriPlot,
               timetk, ggthemes, plotly, tidyverse)
```

# Extract Data from Yahoo Using tidyquant

## Prepare the company code

We would like to crawl web table from yahoo finance historical data. An example of DBS bank is as showb below. https://sg.finance.yahoo.com/quote/D05.SI/history?p=D05.SI

First, we need to prepare a table with company name and the company code.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| warning: false
#| message: false
company <- read_csv("data/companySG.csv")
```

We select the top 40 companies symbol based on their marketcap.We only need the symbol when we crawl from yahoo finance.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| warning: false
#| message: false
Top40 <- company %>% 
  #select the top 40 companies symbol based on marketcap using slice_max
  slice_max(`marketcap`, n=40) %>% 
  select(symbol)
```

## Crawl

Start crawling using [tq_get()](https://business-science.github.io/tidyquant/reference/tq_get.html) to crawl from yahoo fiance API.

Note that tq_get(x, get = ...) the x is a single character string, which matches with what we have in Top40 Symbol.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| warning: false
#| message: false
Stock40_daily <- Top40 %>%
  tq_get(get = "stock.prices", 
         from = "2020-01-01", 
         to = "2023-03-31") %>%
  group_by(symbol) %>%
  #reorganize the table
  tq_transmute(select = NULL, 
               mutate_fun = to.period, 
               #we can change days to such as 'weeks', but suggest to crawl at the days
               period  = "days") 
```

The error msg tells us that the company with the symbol 'RW0U.SI' is no longer available. We crawl 39 companies successfully.

# Plot

## Horizon Graph

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| warning: false
#| message: false
#| fig-width: 14
#| fig-height: 18

Stock40_daily <- Stock40_daily %>%
  left_join(company) %>%
  select(1:8, 11:12)


Stock40_daily %>% 
  ggplot() +
  geom_horizon(aes(x = date, y=adjusted), origin = "midpoint", horizonscale = 6)+
  facet_grid(Name~.)+ #<<
  geom_vline(xintercept = as.Date("2020-03-11"), colour = "grey15", linetype = "dashed", size = 0.5)+ #<<
  geom_vline(xintercept = as.Date("2020-12-14"), colour = "grey15", linetype = "dashed", size = 0.5)+ #<<
  theme_few() +
  scale_fill_hcl(palette = 'RdBu') +
  theme(panel.spacing.y=unit(0, "lines"),
        strip.text.y = element_text(size = 12, angle = 0, hjust = 0),
    legend.position = 'none',
    axis.text.y = element_blank(),
    axis.text.x = element_text(size=7),
    axis.title.y = element_blank(),
    axis.title.x = element_blank(),
    axis.ticks.y = element_blank(),
    panel.border = element_blank()
    ) +
  scale_x_date(expand=c(0,0), date_breaks = "1 month", date_labels = "%b%y") +
  ggtitle('Daily Adjusted Prices (Jan 2020 to Mar 2022)') 

```

## Line Graph

### static historical price of a stock.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| warning: false
#| message: false
Stock40_daily %>%
  filter(symbol == "DBSDF") %>%
  ggplot(aes(x = date, y = close)) +
    geom_line() +
    labs(title = "DBS Group Holdings Ltd (DBSDF) Daily Stock Price", 
         y = "Closing Price", x = "") + 
    theme_tq()
```

### Interactive Line Graph using Plotly

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| warning: false
#| message: false
selected_stocks <-  Stock40_daily %>%
  filter (`symbol` == c("C09.SI", "SINGF", "SNGNF", "C52.SI"))

p <- ggplot(selected_stocks, 
            aes(x = date, y = adjusted)) + 
  scale_y_continuous() +
  geom_line() +
  facet_wrap(~Name, scales = "free_y",) +
  #choose a theme of tq looks professional
  theme_tq() +
  labs(title = "Daily stock prices of selected weak stocks", 
       x = "", y = "Adjusted Price") + 
  theme(axis.text.x = element_text(size = 6), 
        axis.text.y = element_text(size = 6))

ggplotly(p)
```

## Candlestick using tidyquant()

### Simple candlestick

By setting an end date, we can control how many historical data we want to see.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| warning: false
#| message: false
#set an end date
end <- as_date("2023-03-01")

Stock40_daily %>%
  filter(symbol == "DBSDF") %>%
  ggplot(aes(
    x = date, y = close)) +
  geom_candlestick(aes(
    open = open, high = high, 
    low = low, close = close)) +
  geom_line(size = 0.5)+
                          #control how many records you wanna retrieve
    coord_x_date(xlim = c(end - weeks(12), 
                          end),
                 ylim = c(20, 35),
                 expand = TRUE) +
  labs(title = "DBS Group Holdings Ltd (DBSDF) Daily Stock Price", 
       y = "Closing Price", x = "") + 
  theme_tq()
```

### candlestick with moving average

Moving Average can be added using [gemo_ma()](https://business-science.github.io/tidyquant/reference/geom_ma.html).

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| warning: false
#| message: false
Stock40_daily %>%
  filter(symbol == "DBSDF") %>%
  #Plot candlestick first, or the ma lines with be above the candlestick
  ggplot(aes(
    x = date, y = close)) +
  geom_candlestick(aes(
    open = open, high = high, 
    low = low, close = close)) +
  geom_line(size = 0.5)+
  
  #add moving average using gemo_ma
  geom_ma(color = "darkgreen", n = 20) +
  geom_ma(color = "lightgreen", n = 5) + 
    coord_x_date(xlim = c(end - weeks(12), 
                          end),
                 ylim = c(20, 35),
                 expand = TRUE) +
  labs(title = "DBS Group Holdings Ltd (DBSDF) Daily Stock Price",
       subtitle = "darkgreen = 1-day MA, lightgreen = 5-day MA",
       y = "Closing Price", x = "") + 
  theme_tq()
```
### Candlestick with rollinger bands
```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| warning: false
#| message: false
Stock40_daily %>%
  filter(symbol == "DBSDF") %>% 
  ggplot(aes(x=date, y=close))+
  geom_line(size=0.5)+
  geom_bbands(aes(
    high = high, low = low, close = close), 
    ma_fun = SMA, sd = 2, n = 20,
    size = 0.75, color_ma = "blue", 
    color_bands = "red1")+
    coord_x_date(xlim = c("2020-02-01", 
                          "2023-03-01"), 
                 expand = TRUE)+
    labs(title = "DBS Group Holdings Ltd (DBSDF) Daily Stock Price",
         subtitle = "dotted red lines = bollinger bands",
         x = "Date", y ="Price") +
theme(legend.position="none")
```


### Interactie candlestick
As Plotly does not support tidyquant(). Therefore, we need to use ggplot to plot candlestick.
First, we write a function to plot the candlestick. Then, we use ggplotly to plot an interactive candlestick.
An example for DBS for YTD is as shown below.
```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| warning: false
#| message: false

candleStick_plot<-function(symbol, from, to){
  tq_get(symbol, from = from, to = to, warnings = FALSE) %>% 
    mutate(greenRed=ifelse(open-close>0, "Red", "Green")) %>% 
    ggplot()+
    geom_segment(
      aes(x = date, xend=date, y =open, yend =close, colour=greenRed), 
      size=3)+
    theme_tq()+
    geom_segment(
      aes(x = date, xend=date, y =high, yend =low, colour=greenRed))+
    scale_color_manual(values=c("ForestGreen","Red"))+
    ggtitle(paste0(symbol," (",from," - ",to,")"))+
    theme(legend.position ="none",
          axis.title.y = element_blank(),
          axis.title.x=element_blank(),
          axis.text.x = element_text(angle = 0, vjust = 0.5, hjust=1),
          plot.title= element_text(hjust=0.5))
}

p <- candleStick_plot("DBSDF",
                      from = '2023-01-01',
                      to = today())
ggplotly(p)


```




